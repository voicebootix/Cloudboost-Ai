#!/usr/bin/env python3
"""
CloudBoost AI - Automated Setup and Fix Script

This script automates the initial setup and critical fixes for the CloudBoost AI codebase.
Run this script to quickly transform the mock application into a working platform.

Usage:
    python setup_fix.py

Requirements:
    - Python 3.11+
    - pip installed
    - OpenAI API key (optional for initial setup)
"""

import os
import sys
import subprocess
import secrets
import json
from pathlib import Path
from datetime import datetime

class CloudBoostFixer:
    def __init__(self):
        self.root_dir = Path(__file__).parent
        self.backend_dir = self.root_dir / "backend"
        self.frontend_dir = self.root_dir / "frontend"
        self.env_file = self.root_dir / ".env"
        
    def print_step(self, step_num, title, description=""):
        print(f"\n{'='*60}")
        print(f"STEP {step_num}: {title}")
        if description:
            print(f"Description: {description}")
        print('='*60)
    
    def run_command(self, command, cwd=None, check=True):
        """Run a shell command and return the result"""
        try:
            result = subprocess.run(
                command.split() if isinstance(command, str) else command,
                cwd=cwd or self.root_dir,
                capture_output=True,
                text=True,
                check=check
            )
            return result
        except subprocess.CalledProcessError as e:
            print(f"Command failed: {command}")
            print(f"Error: {e.stderr}")
            return e
    
    def create_env_file(self):
        """Create .env file with secure defaults"""
        jwt_secret = secrets.token_urlsafe(32)
        encryption_key = secrets.token_urlsafe(32)
        
        env_content = f"""# CloudBoost AI Environment Configuration
# Generated by setup_fix.py on {datetime.now().isoformat()}

# Database Configuration
DATABASE_URL=sqlite:///cloudboost_ai.db
REDIS_URL=redis://localhost:6379

# Security
JWT_SECRET={jwt_secret}
ENCRYPTION_KEY={encryption_key}

# AI Services (Add your OpenAI API key here)
OPENAI_API_KEY=your-openai-api-key-here
OPENAI_MODEL=gpt-4

# Communication Services (Add your credentials)
TWILIO_ACCOUNT_SID=your-twilio-account-sid
TWILIO_AUTH_TOKEN=your-twilio-auth-token
TWILIO_PHONE_NUMBER=your-twilio-phone-number
SENDGRID_API_KEY=your-sendgrid-api-key
FROM_EMAIL=noreply@cloudboost.ai

# WhatsApp Business (Add your credentials)
WHATSAPP_TOKEN=your-whatsapp-business-token
WHATSAPP_PHONE_NUMBER_ID=your-phone-number-id

# Social Media APIs (Add your credentials)
FACEBOOK_APP_ID=your-facebook-app-id
FACEBOOK_APP_SECRET=your-facebook-app-secret
LINKEDIN_CLIENT_ID=your-linkedin-client-id
LINKEDIN_CLIENT_SECRET=your-linkedin-client-secret

# Application Settings
FLASK_ENV=development
CORS_ORIGINS=http://localhost:3000,http://localhost:5173
API_RATE_LIMIT=100
APP_BASE_URL=http://localhost:5000
"""
        
        with open(self.env_file, 'w') as f:
            f.write(env_content)
        
        print(f"✅ Created .env file with secure defaults")
        print(f"📝 Please edit {self.env_file} to add your API keys")
    
    def install_dependencies(self):
        """Install required Python packages"""
        packages = [
            "flask-limiter",
            "alembic",
            "python-dotenv",
            "openai",
            "twilio",
            "sendgrid",
            "facebook-sdk"
        ]
        
        print("Installing additional Python packages...")
        for package in packages:
            result = self.run_command(f"pip install {package}", cwd=self.backend_dir)
            if result.returncode == 0:
                print(f"✅ Installed {package}")
            else:
                print(f"❌ Failed to install {package}")
    
    def create_directory_structure(self):
        """Create missing directories and files"""
        directories = [
            self.backend_dir / "src" / "services",
            self.backend_dir / "src" / "config",
            self.backend_dir / "tests",
            self.backend_dir / "migrations"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            (directory / "__init__.py").touch()
            print(f"✅ Created directory: {directory}")
    
    def create_content_model(self):
        """Create the Content model file"""
        content_model = '''from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import uuid

db = SQLAlchemy()

class Content(db.Model):
    __tablename__ = 'content'
    
    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    tenant_id = db.Column(db.String(36), db.ForeignKey('tenants.id'), nullable=False)
    content_type = db.Column(db.String(50), nullable=False)
    prompt = db.Column(db.Text, nullable=False)
    generated_content = db.Column(db.Text, nullable=False)
    language = db.Column(db.String(10), nullable=False)
    platform = db.Column(db.String(50))
    status = db.Column(db.String(20), default='draft')
    usage_count = db.Column(db.Integer, default=0)
    performance_score = db.Column(db.Float)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def to_dict(self):
        return {
            'id': self.id,
            'tenant_id': self.tenant_id,
            'content_type': self.content_type,
            'generated_content': self.generated_content,
            'language': self.language,
            'platform': self.platform,
            'status': self.status,
            'usage_count': self.usage_count,
            'performance_score': self.performance_score,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
'''
        
        content_file = self.backend_dir / "src" / "models" / "content.py"
        with open(content_file, 'w') as f:
            f.write(content_model)
        
        print(f"✅ Created Content model: {content_file}")
    
    def create_ai_service(self):
        """Create the AI service file"""
        ai_service = '''import openai
import os
from typing import Dict, Optional

class AIContentService:
    def __init__(self):
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key or api_key == 'your-openai-api-key-here':
            print("⚠️ Warning: OpenAI API key not configured. AI features will not work.")
            self.client = None
        else:
            self.client = openai.OpenAI(api_key=api_key)
        
        self.model = os.getenv('OPENAI_MODEL', 'gpt-4')
    
    def generate_content(self, content_type: str, prompt: str, language: str, 
                        platform: Optional[str] = None, business_profile=None) -> str:
        """Generate AI content with cultural adaptation"""
        
        if not self.client:
            return f"[DEMO CONTENT] This would be AI-generated {content_type} content for: {prompt}"
        
        cultural_context = self._get_cultural_context(language)
        platform_context = self._get_platform_context(platform) if platform else ""
        
        system_prompt = f"""You are an expert content creator for South Asian markets.
        
Cultural Context: {cultural_context}
Platform Context: {platform_context}

Create engaging, culturally appropriate {content_type} content.
Language: {language}
"""
        
        try:
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=1000
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            raise Exception(f"AI content generation failed: {str(e)}")
    
    def _get_cultural_context(self, language: str) -> str:
        contexts = {
            'en': 'Professional, international business tone',
            'si': 'Respectful tone honoring Sri Lankan cultural traditions',
            'ta': 'Culturally sensitive approach respecting Tamil traditions',
            'hi': 'Respectful Hindi with Indian cultural values',
            'ur': 'Formal Urdu respecting Pakistani business culture',
            'bn': 'Bengali content reflecting Bangladeshi cultural values'
        }
        return contexts.get(language, 'Professional, culturally-sensitive tone')
    
    def _get_platform_context(self, platform: str) -> str:
        contexts = {
            'facebook': 'Engaging, community-focused content with emojis',
            'instagram': 'Visual-first content with compelling captions',
            'linkedin': 'Professional, business-focused content',
            'twitter': 'Concise, impactful messages under 280 characters',
            'whatsapp': 'Personal, conversational tone',
            'email': 'Professional email format with clear CTA'
        }
        return contexts.get(platform, 'General content optimization')

# Singleton instance
ai_service = AIContentService()
'''
        
        ai_file = self.backend_dir / "src" / "services" / "ai_service.py"
        with open(ai_file, 'w') as f:
            f.write(ai_service)
        
        print(f"✅ Created AI service: {ai_file}")
    
    def fix_main_app(self):
        """Fix the main Flask application with security improvements"""
        main_py_additions = '''
# Add these imports at the top
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
import secrets

# Add this after app = Flask(__name__)
def get_secret_key():
    secret_key = os.environ.get('JWT_SECRET')
    if not secret_key:
        if os.environ.get('FLASK_ENV') == 'development':
            secret_key = secrets.token_urlsafe(32)
            print(f"Generated development JWT secret: {secret_key}")
        else:
            raise ValueError("JWT_SECRET environment variable must be set in production")
    return secret_key

def get_cors_origins():
    origins = os.environ.get('CORS_ORIGINS', '')
    if not origins:
        if os.environ.get('FLASK_ENV') == 'development':
            return ['http://localhost:3000', 'http://localhost:5173']
        else:
            raise ValueError("CORS_ORIGINS must be set in production")
    return origins.split(',')

# Replace the app.config lines with:
app.config['SECRET_KEY'] = get_secret_key()
app.config['JWT_SECRET_KEY'] = get_secret_key()

# Add rate limiting
limiter = Limiter(
    app,
    key_func=get_remote_address,
    default_limits=["1000 per day", "100 per hour"]
)
'''
        
        print("📝 Main application security fixes:")
        print("   - Add rate limiting with flask-limiter")
        print("   - Use secure JWT secret generation")
        print("   - Implement proper CORS configuration")
        print("   - Add environment variable validation")
        print(f"\n⚠️ Please manually update {self.backend_dir}/src/main.py with the security improvements from the implementation guide.")
    
    def create_test_endpoints(self):
        """Add test endpoints to verify functionality"""
        test_content = '''
# Add this test endpoint to your content.py routes file:

@content_bp.route('/test-ai', methods=['POST'])
@jwt_required()
def test_ai():
    try:
        from src.services.ai_service import ai_service
        
        test_content = ai_service.generate_content(
            content_type='social_post',
            prompt='Write a welcome message for a new customer',
            language='en',
            platform='facebook'
        )
        
        return jsonify({
            'success': True,
            'generated_content': test_content,
            'message': 'AI integration is working!'
        }), 200
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@content_bp.route('/health', methods=['GET'])
def health_check():
    """Simple health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'content-generation',
        'ai_configured': os.getenv('OPENAI_API_KEY') and os.getenv('OPENAI_API_KEY') != 'your-openai-api-key-here'
    }), 200
'''
        
        print("📝 Test endpoints created:")
        print("   - /api/content/test-ai (Test AI generation)")
        print("   - /api/content/health (Health check)")
        print(f"\n⚠️ Please add these test endpoints to your backend/src/routes/content.py file")
    
    def create_database_init_script(self):
        """Create a script to initialize the database"""
        init_script = '''#!/usr/bin/env python3
"""
Database initialization script for CloudBoost AI
Run this after setting up your environment to create tables and admin user.
"""

import os
import sys
from pathlib import Path

# Add the src directory to Python path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from main import app, db
from models.user import User, Tenant

def init_database():
    """Initialize database with tables and admin user"""
    with app.app_context():
        try:
            # Create all tables
            db.create_all()
            print("✅ Database tables created successfully")
            
            # Check if admin user already exists
            existing_tenant = Tenant.query.filter_by(domain='demo.cloudboost.ai').first()
            if existing_tenant:
                print("⚠️ Demo tenant already exists")
                return
            
            # Create demo tenant
            tenant = Tenant(
                name='Demo Company',
                domain='demo.cloudboost.ai',
                subscription_plan='pro'
            )
            db.session.add(tenant)
            db.session.flush()
            
            # Create admin user
            admin_user = User(
                tenant_id=tenant.id,
                email='admin@demo.com',
                first_name='Admin',
                last_name='User',
                role='admin'
            )
            admin_user.set_password('admin123')
            
            db.session.add(admin_user)
            db.session.commit()
            
            print("✅ Demo tenant and admin user created:")
            print(f"   Email: admin@demo.com")
            print(f"   Password: admin123")
            print(f"   Tenant Domain: demo.cloudboost.ai")
            print(f"   Tenant ID: {tenant.id}")
            
        except Exception as e:
            print(f"❌ Database initialization failed: {e}")
            db.session.rollback()

if __name__ == '__main__':
    init_database()
'''
        
        init_file = self.backend_dir / "init_database.py"
        with open(init_file, 'w') as f:
            f.write(init_script)
        
        os.chmod(init_file, 0o755)  # Make executable
        print(f"✅ Created database initialization script: {init_file}")
    
    def create_testing_script(self):
        """Create a script to test the fixed endpoints"""
        test_script = '''#!/usr/bin/env python3
"""
CloudBoost AI - API Testing Script
Test the fixed endpoints to verify functionality.
"""

import requests
import json
import sys

BASE_URL = "http://localhost:5000"

def test_health():
    """Test health endpoints"""
    print("\\n" + "="*50)
    print("TESTING HEALTH ENDPOINTS")
    print("="*50)
    
    try:
        response = requests.get(f"{BASE_URL}/api/health")
        print(f"API Health: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2)}")
    except Exception as e:
        print(f"❌ Health check failed: {e}")

def test_auth():
    """Test authentication"""
    print("\\n" + "="*50)
    print("TESTING AUTHENTICATION")
    print("="*50)
    
    login_data = {
        "email": "admin@demo.com",
        "password": "admin123",
        "tenant_domain": "demo.cloudboost.ai"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/auth/login", json=login_data)
        print(f"Login Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("✅ Login successful!")
            token = data.get('access_token')
            print(f"Access Token: {token[:50]}...")
            return token
        else:
            print(f"❌ Login failed: {response.text}")
            return None
    except Exception as e:
        print(f"❌ Login request failed: {e}")
        return None

def test_ai_content(token):
    """Test AI content generation"""
    if not token:
        print("⚠️ Skipping AI test - no authentication token")
        return
    
    print("\\n" + "="*50)
    print("TESTING AI CONTENT GENERATION")
    print("="*50)
    
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.post(f"{BASE_URL}/api/content/test-ai", headers=headers)
        print(f"AI Test Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("✅ AI content generation working!")
            print(f"Generated: {data.get('generated_content', '')[:100]}...")
        else:
            print(f"❌ AI test failed: {response.text}")
    except Exception as e:
        print(f"❌ AI test request failed: {e}")

def main():
    print("CloudBoost AI - API Testing")
    print("Make sure the backend server is running on http://localhost:5000")
    
    # Test endpoints
    test_health()
    token = test_auth()
    test_ai_content(token)
    
    print("\\n" + "="*50)
    print("TESTING COMPLETE")
    print("="*50)
    
    if token:
        print("✅ Basic functionality is working!")
        print("🚀 Your CloudBoost AI platform is ready for development!")
    else:
        print("❌ Some tests failed. Check your configuration.")

if __name__ == '__main__':
    main()
'''
        
        test_file = self.root_dir / "test_api.py"
        with open(test_file, 'w') as f:
            f.write(test_script)
        
        os.chmod(test_file, 0o755)  # Make executable
        print(f"✅ Created API testing script: {test_file}")
    
    def print_summary(self):
        """Print setup summary and next steps"""
        print(f"\n{'🎉'*20}")
        print("CLOUDBOOST AI SETUP COMPLETE!")
        print('🎉'*20)
        
        print(f"\n📋 WHAT WAS DONE:")
        print("   ✅ Created secure .env file with generated secrets")
        print("   ✅ Installed additional Python dependencies")
        print("   ✅ Created missing directory structure")
        print("   ✅ Added Content database model")
        print("   ✅ Created AI service with OpenAI integration")
        print("   ✅ Added database initialization script")
        print("   ✅ Created API testing script")
        
        print(f"\n📝 NEXT STEPS:")
        print("1. Edit .env file and add your OpenAI API key")
        print("2. Apply security fixes to backend/src/main.py (see implementation guide)")
        print("3. Run database initialization:")
        print(f"   cd {self.backend_dir}")
        print("   python init_database.py")
        print("4. Start the backend server:")
        print("   python src/main.py")
        print("5. Test the API:")
        print("   python ../test_api.py")
        
        print(f"\n🔑 DEFAULT CREDENTIALS:")
        print("   Email: admin@demo.com")
        print("   Password: admin123")
        print("   Tenant Domain: demo.cloudboost.ai")
        
        print(f"\n📚 REFERENCE DOCUMENTS:")
        print("   - FIX_IMPLEMENTATION_GUIDE.md - Complete implementation guide")
        print("   - QUICK_START_IMPLEMENTATION.md - Step-by-step quick start")
        print("   - CODE_QUALITY_ASSESSMENT.md - Detailed issue analysis")
        
        print(f"\n🚀 You've successfully started transforming CloudBoost AI!")
        print("   Continue with the implementation guide to add more features.")

def main():
    """Main setup function"""
    import datetime
    
    print("CloudBoost AI - Automated Setup and Fix Script")
    print(f"Starting setup at {datetime.datetime.now()}")
    
    fixer = CloudBoostFixer()
    
    try:
        fixer.print_step(1, "Creating Environment Configuration")
        fixer.create_env_file()
        
        fixer.print_step(2, "Installing Dependencies")
        fixer.install_dependencies()
        
        fixer.print_step(3, "Creating Directory Structure")
        fixer.create_directory_structure()
        
        fixer.print_step(4, "Creating Database Models")
        fixer.create_content_model()
        
        fixer.print_step(5, "Creating AI Service")
        fixer.create_ai_service()
        
        fixer.print_step(6, "Security Improvements Notes")
        fixer.fix_main_app()
        
        fixer.print_step(7, "Creating Test Endpoints")
        fixer.create_test_endpoints()
        
        fixer.print_step(8, "Creating Utility Scripts")
        fixer.create_database_init_script()
        fixer.create_testing_script()
        
        fixer.print_summary()
        
    except Exception as e:
        print(f"\n❌ Setup failed: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()